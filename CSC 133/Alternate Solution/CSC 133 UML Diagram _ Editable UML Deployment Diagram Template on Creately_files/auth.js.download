/**
 * This component manages Graivty Authentication for all necessary
 * functionality in the site.
 * 
 * Contain functionality to handle gravity client library functions,
 * this will be accessible on the browser global scope.
 */
window.gravityAuth = (function () {

    var isBootstrapped = false;
    
    /**
     * Success actions
     * This will be used to identify which action needed to be triggered on success callback.
     */
    var SUCCESS_ACTION_DEFAULT = 1;
    var SUCCESS_ACTION_RELOAD = 2;

    /**
     * This will record newsletter consent, consent will be record on MixPanel after a successful registration
     */
    var actionNewsletterConsent = 'none';
    var typeNewsletterConsent = null;

    /**
     * Bootstraps gravity if not already done.
     */
    var bootstrap = function(){
        if( !isBootstrapped ){
            //Setup the gravity widgets
            gravity.bootstrap( 'gravity-placeholder' );
            isBootstrapped = true;
        }
    }

    /**
     * Retuns the current host and protocol
     * part of the URL
     */
    var currentHost = function(){
        return gravity.client.getCreatelyHome();
    }

    var signInSignUpSuccess = function( result, onSuccess, closeOnSuccess ) {

        if( result.action === 'login' ) {

            showSpinner( 'gravity-signin-widget' );

            recordSuccess( 'TYPE_LOGIN', function() {

                if( onSignInSuccess( result.status ) ) {
                    if( onSuccess === SUCCESS_ACTION_DEFAULT ) {

                        // get user app session count
                        httpGetRequest( currentHost() + '/user/app-session-count', function( status, response ) {
                            
                            if( closeOnSuccess ) {
                                hideWidget( 'gravity-signin-widget' );
                            }

                            if( status == 200 && response > 0 ) {
                                createlyWidgets.showBottom('success-beta-app');
                                createlyWidgets.show('success-popup');
                            } else {
                                createlyWidgets.show('success-popup');
                            }
                        });
                    } else if( onSuccess === SUCCESS_ACTION_RELOAD ) {
                        
                        if( closeOnSuccess ) {
                            hideWidget( 'gravity-signin-widget' );
                        }

                        window.location.reload();
                    } else {
                        
                        if( closeOnSuccess ) {
                            hideWidget( 'gravity-signin-widget' );
                        }
                        
                        onSuccess('TYPE_LOGIN');
                    }
                }
            });
        } else {

            showSpinner( 'gravity-signup-widget' );

            recordSuccess( 'TYPE_SIGNUP', function() {

                if( closeOnSuccess ) {
                    hideWidget( 'gravity-signup-widget' );
                }
                
                if ( onSuccess === SUCCESS_ACTION_DEFAULT ) {
                    goToPlans();
                } else if( onSuccess === SUCCESS_ACTION_RELOAD ) {
                    window.location.reload();
                } else {
                    onSuccess('TYPE_SIGNUP');
                }
            });
        }
    }

    var signInSignUpFail = function( error, onClose ) {
        if( error == 0 && onClose ) {
            onClose();
        }
    };

    /**
     * Removes the given cookie.
     * @param name is the name of the cookie
     */
    var removeCookie = function( name ){
        document.cookie = name + '=; path=/; domain=' + gravity.client.getCookieDomain() + '; expires=' + new Date(0).toUTCString();
    }

    /**
     * returns true if the demo cookie is 
     * available.
     */
    var hasDemoCookie = function(){
        return document.cookie.indexOf('creately_demo') >= 0;
    } 

    /**
     * Remove creately demo cookie and JSESSIONID cookie.
     */
    var removeSessionCookies = function(){
        removeCookie( 'creately_demo' );
        removeCookie( 'JSESSIONID' );
    }

    /**
     * Remove current Drupal session in user logout.
     * If left the session as it is, boost caching interfere with authenticated users.
     */
    var removeDrupalSessionCookie = function() {
        /**
         * Define name of the Drupal session cookie.
         * Session cookie name is generated by concatanating 
         * SESS + md5(cookie domain on setting file)
         */
        var DRUPAL_SESSION_COOKIE_NAME = 'SESS9f180724c55cd2f1a2dca2997f588020';

        removeCookie( DRUPAL_SESSION_COOKIE_NAME );
    }
    
    /**
     * Go to plans page
     */
    var goToPlans = function () {
        window.location = currentHost() + '/plans';
    };

    /**
     * Get user data and record login and signup events to mixpanel.
     */
    var recordLoginSignup = function( type, callback ) {

       var location = hasDemoCookie() ? 'demo' : '';

        httpGetRequest( currentHost() + '/gravityauth/set-new-user-session', function( status, response ){
            if( status == 200 ) {

                httpGetRequest( currentHost() + '/gravityauth/get-user-data', function( status, response ){
                    if( status == 200 && response != 'false' ) {

                        var data = JSON.parse( response );
                        data['location'] = location;

                        // First call record to mixpanel function,
                        // record to ga function pass as callback function
                        recordToMixpanel( type, data, function(){
                            recordToGA( type, data, callback);
                        });
                    } else {
                        console.error( 'Error occured in get user data: ' + status );
                        callback & callback();
                    }
                });
            } else {
                console.error( 'Error occured in set new user session: ' + status );
                callback && callback();
            }
        });
    }

    /**
     * Record login & signup events to mixpanel
     */
    var recordToMixpanel = function( type, data, callback ) {

        if( typeof MixpanelTracker === 'object' ) {

            if( type == 'TYPE_SIGNUP' ){ 
                MixpanelTracker.trackNewsletter( data['email'], 'signup', actionNewsletterConsent, typeNewsletterConsent );
                MixpanelTracker.trackSignup( data['email'], data['provider'], 'success', data['location'], data['first_name'], data['last_name'], data['created_date'], callback );
                
                // unset newsletter consent parameters
                actionNewsletterConsent = undefined;
                typeNewsletterConsent = undefined;
            } else { 
                MixpanelTracker.trackLogin( data['email'], data['provider'], 'success', data['plan_type'], data['plan_team_size'], data['location'], callback );
            }
        } else {
            callback && callback();
        }
    }

    /**
     * Record login & signup events to google analytics
     */
    var recordToGA = function( type, data, callback ) {

        if( typeof gaTracker === 'object' ) {

            if( type == 'TYPE_SIGNUP' ){
                gaTracker.trackSignup( data['provider'], data['location'], callback );
            } else {
                gaTracker.trackLogin( data['provider'], data['plan_type'], data['plan_team_size'], data['location'], callback );
            }
        } else {
            callback && callback();
        }
    }

    /**
     * This function will be called on sign in success
     * @param status is user status
     */
    var onSignInSuccess = function( status ){

        switch ( status ) {
            case 2:
                // if response status 2, redirect user to team confirm page
                window.location = currentHost() + '/account/team/confirm';
                break;
            case 3:
                // If response status 3, redirect user to payment pending page
                window.location = currentHost() + '/account/renew/subscription';
                break;
            default:
                return true;
        }

        return false;
    }

    /**
     * When login or registration done record to mixpanel & google analytics,
     * remove session cookies and hide the gravity widget.
     */
    var recordSuccess = function( type, callback ){
        // Record login/signup to mixpanel & google analytics
        recordLoginSignup( type, callback );

        removeSessionCookies();
    }

    /**
     * Show loading spinner
     * @param widgetId is the id of the particular widget which needs to show the loading spinner
     */
    var showSpinner = function( widgetId ) {
        if( document.getElementById && document.getElementsByClassName ){
            document.getElementById( widgetId ).getElementsByClassName('loading-spinner')[0].style.visibility = 'visible';
        }
    }

    /**
     * Hide loading spinner
     * @param widgetId is the id of the particular widget which needs to show the loading spinner
     */
    var hideSpinner = function( widgetId ) {
        if( document.getElementById && document.getElementsByClassName ){
            document.getElementById( widgetId ).getElementsByClassName('loading-spinner')[0].style.visibility = 'hidden';
        }
    }

    /**
     * Hide parsing widget spinner and close gravity widget
     * @param widgetId is the id of the particular widget which needs to hide the loading spinner
     */
    var hideWidget = function( widgetId ) {
        hideSpinner( widgetId );
        gravity.widget.hide();
    }

    /**
     * Add event listeners to login & signup widgets close buttons
     */
    var addLoginSignupCloseListeners = function() {

        addClickEventListener( '#gravity-signup-widget #gravity-popup-close', recordSignUpClose );
        addClickEventListener( '#gravity-signin-widget #gravity-popup-close', recordSignInClose );
    }

    /**
     * Remove event listeners from login & signup widgets close buttons
     */
    var removeLoginSignupCloseListeners = function() {

        removeClickEventListener( '#gravity-signup-widget #gravity-popup-close', recordSignUpClose );
        removeClickEventListener( '#gravity-signin-widget #gravity-popup-close', recordSignInClose );
    }

    var recordSignUpClose = function() {
        recordLoginSignupEvent( 'close', 'register' );
        
        // remove login & signup widgets close event listeners
        removeLoginSignupCloseListeners();

        // remove login & signup widgets swap event listeners
        removeLoginSignupSwapListeners();
    }

    var recordSignInClose = function() {
        recordLoginSignupEvent( 'close', 'login' );
        
        // remove login & signup widgets close event listeners
        removeLoginSignupCloseListeners();

        // remove login & signup widgets swap event listeners
        removeLoginSignupSwapListeners();
    }

    /**
     * Add event listeners to login & signup widgets swap links
     */
    var addLoginSignupSwapListeners = function() {

        addClickEventListener( '#gravity-signup-widget .show-sign-in button', recordSignUpSwap );
        addClickEventListener( '#gravity-signin-widget .show-sign-up button', recordSignInSwap );
    }

    /**
     * Remove event listeners from login & signup widgets swap links
     */
    var removeLoginSignupSwapListeners = function() {

        removeClickEventListener( '#gravity-signup-widget .show-sign-in button', recordSignUpSwap );
        removeClickEventListener( '#gravity-signin-widget .show-sign-up button', recordSignInSwap );
    }

    var recordSignUpSwap = function() {
        recordLoginSignupEvent( 'swap', 'register' );
    }

    var recordSignInSwap = function() {
        recordLoginSignupEvent( 'swap', 'login' );
    }

    /*
     * Add event listener to signup button click, to record newsletter consent
     */
    var addNewsletterCheckedListener = function() {

        addClickEventListener( '#gravity-signup-widget .signup-btn button', recordNewsletterConsent );
        addClickEventListener( '#gravity-signup-widget .social-login .facebook button', recordNewsletterConsent );
        addClickEventListener( '#gravity-signup-widget .social-login .twitter button', recordNewsletterConsent );
        addClickEventListener( '#gravity-signup-widget .social-login .googleplus button', recordNewsletterConsent );
    }

    /**
     * Add event listener to given selector element
     * @param selector - CSS selector string of the element
     * @param listener - function to run when the event occurs
     */
    var addClickEventListener = function( selector, listener ) {

        var element = document.querySelector( selector );

        if( element ) {
            element.addEventListener( 'click', listener );
        }
    }

    /**
     * Remove event listener from given selector element
     * @param selector - CSS selector string of the element
     * @param listener - function to run when the event occurs
     */
    var removeClickEventListener = function( selector, listener ) {

        var element = document.querySelector( selector );

        if( element ) {
            element.removeEventListener( 'click', listener );
        }
    }

    /**
     * Record login & signup widgets events to mixpanel
     * @param action - load / close / swap
     * @param authWindow - login / register
     */
    var recordLoginSignupEvent = function( action, authWindow ) {

        if( typeof MixpanelTracker === 'object' ) {
            MixpanelTracker.trackAuthWindow( action, authWindow );
        }
    }

    /*
     * Record newsletter consent to mixpanel
     */
    var recordNewsletterConsent = function() {
        var email = document.querySelector( '#gravity-signup-widget input.email-field' ).value;
        var newsletterVal = document.getElementById( 'email-preference-checkbox' ).checked;
        
        if( newsletterVal ) {
            actionNewsletterConsent = 'subscribe';
            typeNewsletterConsent = 'newsletter,engagement';
        } else {
            actionNewsletterConsent = 'none';
            typeNewsletterConsent = null;
        }
    }

    return {
        
        /**
         * User action types
         * This will be used to identify which gravity client widget to be shown.
         */
        TYPE_LOGIN: 'TYPE_LOGIN',
        TYPE_SIGNUP: 'TYPE_SIGNUP',

        /**
         * Show signin/signup widget
         * Handle signin and signup success callbacks
         * @param action indicates one of TYPE_LOGIN or TYPE_SIGNUP
         * @param onSuccess is a constant defined by starting SUCCESS_ or a callback
         *      function to be executed when the login/registration is successful.
         * @param onClose is a callback that will be called when the widget is manually closed.
         * @param closeOnSuccess is a boolean value which is use to decide widget will 
         *      close on login/registration success.
         */
        show: function( action, onSuccess, onClose, closeOnSuccess ) {

            bootstrap();
            
            var onSuccess = onSuccess ? onSuccess: SUCCESS_ACTION_DEFAULT;
            var closeOnSuccess = typeof closeOnSuccess !== 'undefined' ? closeOnSuccess : true;

            var widgetPromise = gravity.widget.show();
            
            // Show signin/signup widget
            // Record login & signup widget show events to mixpanel
            if( action === this.TYPE_LOGIN ) {
                gravity.widget.showSignIn();
                recordLoginSignupEvent( 'load', 'login' );

            } else if( action === this.TYPE_SIGNUP ) {
                gravity.widget.showSignUp();
                recordLoginSignupEvent( 'load', 'register' );
            }

            widgetPromise.then( function( result ) {
                signInSignUpSuccess( result, onSuccess, closeOnSuccess );
            }, function( error ) {
                signInSignUpFail( error, onClose );
            });

            addNewsletterCheckedListener();

            // add event listeners to login & signup widgets close events
            addLoginSignupCloseListeners();

            // add event listeners to login & signup widgets swap events
            addLoginSignupSwapListeners();
        },

        /**
         * Logout users
         * Call gravity logout function,
         * remove creately_demo and JSESSIONID cookies,
         * then redirect user to home page
         */
         logOutUser: function() {
            
            // Call gravity client logout function, this will remove gravity token
            gravity.client.logOut();
            
            // Remove creately demo and JSESSIONID cookies
            removeSessionCookies();

            // Remove current Drupal session
            removeDrupalSessionCookie();

            // User redirect to home page
            window.location = '/';
        },
		
        /**
         * This function returns true when the application is being accessed 
         * in demo mode. The basis for the check is the presence of creately
         * demo cookie.
         */
		isDemoUser : function () {			
			return hasDemoCookie();
		},
        
        /**
         * This function calls recordSuccess
         */
        recordRegisterSuccess: function( callback ) {
            recordSuccess( 'TYPE_SIGNUP', callback );
        },

        /**
         * This function calls recordSuccess
         */
        recordLoginSuccess: function( callback ) {
            recordSuccess( 'TYPE_LOGIN', callback );
        },
    };


})();